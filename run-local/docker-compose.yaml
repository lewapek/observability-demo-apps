services:
  view:
    container_name: "workshop-view"
    networks: [ workshop-network ]
    image: lewap/workshop-view:0.5.0
    environment:
      HTTP_PORT: "8080"
      PRODUCT_URI: "http://product:8080"
      ORDER_URI: "http://order:8080"
      TRACING_HOST: "http://jaeger:4317"
      TRACING_TRACER_NAME: "view"
      FORWARD_URI: "http://localhost:8080/common/forward"
      VERSION: 3
    ports:
    - "9500:8080"
    restart: always
    depends_on:
    - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

  product:
    container_name: "workshop-product"
    networks: [ workshop-network ]
    image: lewap/workshop-product:0.5.0
    environment:
      HTTP_PORT: "8080"
      DB_USER: "workshop"
      DB_PASSWORD: "workshop"
      DB_NAME: "workshop_product"
      DB_HOST: "postgres"
      DB_PORT: 5432
      TRACING_HOST: "http://jaeger:4317"
      TRACING_TRACER_NAME: "product"
      FORWARD_URI: "http://localhost:8080/common/forward"
      VERSION: 3
    ports:
    - "9501:8080"
    restart: always
    depends_on:
    - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

  order:
    container_name: "workshop-order"
    networks: [ workshop-network ]
    image: lewap/workshop-order:0.5.0
    environment:
      HTTP_PORT: "8080"
      DB_USER: "workshop"
      DB_PASSWORD: "workshop"
      DB_NAME: "workshop_order"
      DB_HOST: "postgres"
      DB_PORT: 5432
      TRACING_HOST: "http://jaeger:4317"
      TRACING_TRACER_NAME: "order"
      FORWARD_URI: "http://localhost:8080/common/forward"
      VERSION: 1
    ports:
    - "9502:8080"
    restart: always
    depends_on:
    - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

  consumer:
    container_name: "workshop-consumer"
    networks: [ workshop-network ]
    image: lewap/workshop-consumer:0.5.0
    environment:
      HTTP_PORT: "8080"
      PRODUCT_URI: "http://product:8080"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP: "workshop"
      KAFKA_PRODUCTS_TOPIC: "products"
      KAFKA_PRINT_TOPIC: "print"
      TRACING_HOST: "http://jaeger:4317"
      TRACING_TRACER_NAME: "consumer"
      FORWARD_URI: "http://localhost:8080/common/forward"
      VERSION: 1
    ports:
    - "9503:8080"
    restart: always
    depends_on:
    - postgres
    - kafka
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

  postgres:
    container_name: "workshop-postgres"
    networks: [ workshop-network ]
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: "workshop"
      POSTGRES_USER: "workshop"
      POSTGRES_PASSWORD: "workshop"
    command: postgres -c log_statement=all
    restart: always
    volumes:
    - postgres-data:/var/lib/postgresql/data
    - ./init-pg:/docker-entrypoint-initdb.d
    ports:
    - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 500M

  kafka:
    container_name: "workshop-kafka"
    networks: [ workshop-network ]
    image: bitnami/kafka:3.3.2
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@:9093
      ALLOW_PLAINTEXT_LISTENER: yes
    restart: always
    volumes:
    - kafka-data:/bitnami/kafka
    ports:
    - "9094:9094"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 500M

  jaeger:
    container_name: "workshop-jaeger"
    networks: [ workshop-network ]
    image: jaegertracing/all-in-one:1.48
    environment:
      COLLECTOR_OTLP_ENABLED: true
    restart: always
    ports:
    - "16686:16686"
    - "4317:4317" #  if you want to send traces from host
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

  prometheus:
    image: prom/prometheus:v2.51.1
    networks: [ workshop-network ]
    container_name: workshop-prometheus
    volumes:
    - type: bind
      source: .
      target: /etc/prometheus/
    - prometheus-data:/prometheus
    ports:
    - "9090:9090"
    command:
    - "--config.file=/etc/prometheus/prometheus.yml"
    - "--web.listen-address=0.0.0.0:9090"
    - "--storage.tsdb.retention.time=6h"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

volumes:
  prometheus-data:
    name: workshop-prometheus
  postgres-data:
    name: workshop-postgres
  kafka-data:
    name: workshop-kafka

networks:
  workshop-network:
    name: workshop-network